flags ---
re.A	ASCII 仅仅ASCII匹配 与re.U unicode对应
re.I	ignoreCase 不区分大小写
re.L	locale 做本地化识别
re.M	multiLine 多行匹配
re.S	special 使 '.'包括换行在内的所有字符
re.X	使匹配过程忽略表达式的空白和注释,此时空白需要用\s来代替

re.compile(pattern,flags)---
对象模式编辑

匹配一个对象---
re.match()--+
如果字符串开头与正则表达式模式匹配，则返回re对象，否则返回None
re.fullmatch()--+
如果整个字符串与正则表达式模式匹配，则返回re对象，否则返回None
re.search()--+
查找正则表达式模式生成匹配的第一个位置，返回re对象

匹配多个对象---
findall()--+
匹配所有符合的字符串 返回list
finditer()--+
匹配所有符合的字符串 返回iter，其中iter中是re对象

其他---
spilt(pattern,string,flags) --+
按模式的出现次数拆分字符串 pattern 为分隔符
escape(pattern)--+
对模式中的特殊字符进行转义
sub(pattern,repl,string,count=0,flags=0)--+
将匹配的字符串用repl替换
subn 与subn相似但返回元组
repl可以是函数也可以是字符串-+-

>>>def dashrepl(matchobj):
...     if matchobj.group(0) == '-': return ' '
...     else: return '-'
>>> re.sub('-{1,2}', dashrepl, 'pro----gram-files')
'pro--gram files'
>>> re.sub(r'\sAND\s', ' & ', 'Baked Beans And Spam', flags=re.IGNORECASE)
'Baked Beans & Spam

re对象---
集合了匹配对象的相关信息
位置信息 --+
span()	返回匹配的字符串在原文中的位置
包括start end

内容信息--+
模式定义-+-
可对pattern内容分隔，使返回的数据结构化
结构化-++
result = re.search('(http\w*)://(.+) ','lisent: https://www.python.org dfasd')+--
引用可使用 
result.group()	result[0]		https://www.python.org
result.group(1)	result[1]		https
result.group(2)	result[2]		www.python.org
result = re.search('(?P<tpye>http\w*)://(?P<url>.+) ','lisent: https://www.python.org dfasd')+--
result.group()	result[0]		https://www.python.org
result.group(1)	result[1]		https
result.group('type')	result['type']	https
result.group(2)	result[2]		www.python.org
result.group('url')	result['url']		www.python.org
groups()+--
将匹配的字符串集合以set形式输出








